;; Tests for Scheme interpreter GUI stuff
;; Also documents how to use most of the functions

(define w (xwindow-new "Test Window" '(0 0 300 300)))
(component-set-visible w #t)
(xwindow-get-depth-first-interactor-tree w)
(xwindow-get-breadth-first-interactor-tree w)

(define p '(0 0))
(define p1 '(0 0))
(define p2 '(100 100))
(define polygon '((10 10) (10 20) (15 40) (10 40) (10 10)))
(define r '(20 20 50 50))
(define sc (scheme-component-new "Test Scheme Component"))

(define t (turtle-component-new "Test Turtle Component"))

(display "Graphics tests\n")
(graphics-draw-line w p1 p2)
(graphics-draw-line-segments w (list (list p1 p2)))
(graphics-draw-point w p1)
(graphics-draw-points w (list p1 p2))
(graphics-draw-polygon w polygon)
(graphics-draw-rect w r)
(graphics-draw-text w p2 "Some text")
(graphics-fill-polygon w polygon)
(graphics-fill-rect w r)
(graphics-white-color)
(graphics-black-color)
(graphics-set-background-color w (graphics-white-color))
(graphics-set-background-color w (graphics-black-color))
(graphics-get-background-color w)
(graphics-get-foreground-color w)
(graphics-flush)
(graphics-get-clip-rect w)
(graphics-set-clip-rect w r)
(graphics-get-transform w)
(graphics-set-transform w (affine-make-identity))

(display "Component tests (on XWindow)\n")
(component-get-name w)
(component-get-background-color w)
(component-get-bounds w)
(component-get-foreground-color w)
(component-get-parent w)
(component-get-parent-window w)
(component-is-point-in-component? w p)
(component-is-visible? w)
(component-repaint w)
(component-set-background-color w (graphics-white-color))
(component-set-foreground-color w (graphics-black-color))
(component-set-bounds w r)
(component-set-location w p1)
(component-set-size w 400 400)
(component-set-visible w #f)
(component-set-visible w #t)
(component-add-component w sc)
(component-remove-component w sc)
(component-add-component w sc)

(component-set-size w 300 300)
(component-set-bounds sc '(0 0 300 300))
(component-set-visible sc #t)

(display "SchemeComponent tests\n")
(scheme-component-clear-instructions sc)
(scheme-component-get-instructions sc)
(scheme-component-set-instructions sc (scheme-component-get-instructions sc))
(is-scheme-component? sc)

(scheme-component-add-log-message sc "Logging a message!")
(scheme-component-clear-instructions sc)

(scheme-component-add-draw-line sc p1 p2)
(scheme-component-add-draw-line-segments sc (list (list p1 p2)))
(scheme-component-add-draw-point sc p1)
(scheme-component-add-draw-points sc (list p1 p2))
(scheme-component-add-draw-polygon sc polygon)
(scheme-component-add-draw-rect sc r)
(scheme-component-add-draw-text sc p2 "Some text")
(scheme-component-add-fill-polygon sc polygon)
(scheme-component-add-fill-rect sc r)
(scheme-component-add-set-background-color sc (graphics-white-color))
(scheme-component-add-set-background-color sc (graphics-black-color))
(scheme-component-add-flush sc)
(scheme-component-add-set-clip-rect sc r)
(scheme-component-add-set-transform sc (affine-make-identity))

(component-set-size w 600 300)

;; (component-set-bounds t '(300 0 300 300))
;; (component-set-visible t #t)

(display "TurtleGraphics tests\n")
(is-turtle-graphics? t)
(component-add-component w t)

(turtle-clear-instructions t)
(turtle-rotate t 1.5)
(turtle-forward t 100 #t)
(turtle-draw-text t "Some Turtle Text")
(turtle-draw-point t)
(turtle-get-instructions t)
(turtle-get-num-steps t)
(turtle-get-orientation t (turtle-get-num-steps t))
(turtle-get-position t (turtle-get-num-steps t))
(turtle-get-affine-transform t (turtle-get-num-steps t))
(turtle-draw-step t (turtle-get-num-steps t))

(display (data->string (map component-get-name (xwindow-get-depth-first-interactor-tree w))))

(define (generic-callback . args)
  (display (string-append "Callback: " (data->string args) "\n")))

(scheme-component-add-mouse-event-callback sc generic-callback)
(scheme-component-add-key-event-callback sc generic-callback)

(simulate-key-press-event w #\x)
(simulate-key-release-event w #\x)
(simulate-mouse-down-event w '(20 20))
(simulate-mouse-up-event w '(20 20))
(simulate-mouse-move-event w '(100 100))
(simulate-mouse-drag-event w p1)
